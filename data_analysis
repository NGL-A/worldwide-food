---
title: "Progetto food-gdp"
author: "Myself"
date: "19/11/2022"
output: html_document
---
Study the data of the country
Correlation matrix to see correlation among predictors
Use tslm as baseline, check dw
Use linear model to get VIF and extract a subset of features
Use Arima
Use Arimax looking for the feature that gets the lowest AIC

ACf has significant correlation -> trend
F -> significance of the model, if>4 good

gdp/pop->gdp per capita

```{r}
library(readxl)
library(lmtest) 
library(forecast)
library(DIMORA)
library(fastDummies)
library(dplyr)
library("xts")
library(ggplot2)
library(corrplot)
library(car)
library(forcats)
library(tseries)
library(lattice)
farming <- read.csv(file = './farming.csv')
```


```{r}
#return year-gdp for a specific country
country_gdp <- function(country_name){
  country_subset = farming[farming$Area==country_name,]
  Year = c(min(country_subset$Year):max(country_subset$Year))
  gdp = c()
  for (y in Year){
    gdp = append(gdp,country_subset[country_subset$Year==y,]$GDP[1])
  }
  return(data.frame(Year,gdp))
}
#return year-pop for a specific country
country_pop <- function(country_name){
  country_subset = farming[farming$Area==country_name,]
  Year = c(min(country_subset$Year):max(country_subset$Year))
  pop = c()
  for (y in Year){
    pop = append(pop,country_subset[country_subset$Year==y,]$Pop[1])
  }
  return(data.frame(Year,pop))
}
#return item dataframe for a specific country
country_item <- function(country_name,crop){
  country_subset = farming[(farming$Area==country_name)&(farming$Item==crop),]
  return(data.frame(country_subset$Year,country_subset$Value))
}
#return subset for a country
country_crops <- function(country_name){
  return(farming[farming$Area==country_name,])
}
#return change subset for a specific country and a specific item if given
country_item_increase <- function(country_name,crop=""){
  if (crop==""){
    country_subset = farming[farming$Area==country_name,]
  }
  else{
    country_subset = farming[(farming$Area==country_name)&(farming$Item==crop),]
  }
  years = c(min(country_subset$Year):max(country_subset$Year))
  change = c()
  for (y in years){
    change = append(change,mean(country_subset[country_subset$Year==y,]$Increase))
  }
  return(data.frame(years,change))
}
#return dataframe of the country with aggregate value by year and type,gpd,pop
agg_item<-function(country){
  subfarming <- farming[farming$Area==country,]
  subfarming<-aggregate(Value ~ Year+type, data=subfarming, FUN=sum)
  subfarming <- dummy_cols(subfarming)
  crops_types <-subfarming$type[!duplicated(subfarming$type)]
  names(subfarming)<-c("Year","type","Value",crops_types)
  for (i in crops_types){
    subfarming[subfarming[names(subfarming)==i]==1,i] = subfarming[subfarming[names(subfarming)==i]==1,"Value"]
  }
  df <- data.frame(c(min(subfarming$Year):max(subfarming$Year)))
  names(df)<-"Year"
  for (i in crops_types){
    df2=(subfarming[subfarming[names(subfarming)==i]!=0,c("Year",i)])
    df<-merge(df,df2,by="Year",all.x = TRUE)
    }
  df[is.na(df)] <- 0
  df=merge.data.frame(df,country_gdp(country),by="Year")
  df=merge.data.frame(df,country_pop(country),by="Year")
  colnames(df)[colnames(df) == 'fruit_vegetables'] <- 'fr_veg'
  colnames(df)[colnames(df) == 'mushrooms'] <- 'ms'
  df$Year<-as.Date(as.character(df$Year),format="%Y")
  return(df)
}
#Plot the correlation matrix for the dataset of the country given
corcountry <- function(country_subset){
  cor=cor(country_subset[,-1])
  corrplot(cor,is.corr = TRUE,type="upper",title=comment(country_subset),mar=c(0,0,1,0))
  corrplot(cor,is.corr = TRUE,type="upper",title=comment(country_subset),method = 'number',number.cex = 0.75,mar=c(0,0,1,0))
}
#Plot 3 ggplots for coltivations,gdp and population for the country given
ggplots<-function(country_subset){
  d=dim(country_subset)[2]
  df <- xts(country_subset[,2:d],country_subset$Year)
  list(ggplot(mapping = aes(x = Index, y = Value)) +
    geom_line(data = fortify(df$cereals, melt = TRUE), aes(color = "cereals"),size=1.2) + 
    geom_line(data = fortify(df$fibres, melt = TRUE), aes(color = "fibres"),size=1.2) + 
    #geom_line(data = fortify(df$fr_veg, melt = TRUE), aes(color = "fr_veg"),size=1.2) +
    geom_line(data = fortify(df$herbs, melt = TRUE), aes(color = "herbs"),size=1.2) +
    geom_line(data = fortify(df$legumes, melt = TRUE), aes(color = "legumes"),size=1.2) +
    #geom_line(data = fortify(df$Live, melt = TRUE), aes(color = "Live"),size=1.2) +
    geom_line(data = fortify(df$ms, melt = TRUE), aes(color = "ms"),size=1.2) +
    geom_line(data = fortify(df$nuts, melt = TRUE), aes(color = "nuts"),size=1.2) +
    geom_line(data = fortify(df$oils, melt = TRUE), aes(color = "oils"),size=1.2) +
    geom_line(data = fortify(df$other, melt = TRUE), aes(color = "other"),size=1.2) +
    geom_line(data = fortify(df$tubers, melt = TRUE), aes(color = "tubers"),size=1.2) +
    xlab("Year") + ylab("Tons")+ggtitle('Production growth'),
  ggplot(mapping = aes(x = Index, y = Value)) +
    geom_line(data = fortify(df$gdp, melt = TRUE), aes(color = "GDP"),size=1.2) + 
    xlab("Year") + ylab("Gdp")+ggtitle('GDP growth'),
  ggplot(mapping = aes(x = Index, y = Value)) +
    geom_line(data = fortify(df$pop, melt = TRUE), aes(color = "Population"),size=1.2) + 
    xlab("Year") + ylab("Population")+ggtitle('Population growth'))
}
#Time Series linear model for gdp
#If the R squared is very high but the value of DWTest is near 0 that means there is a positive autocorrelation among the residuals at lag 1
#If checking the plot of the residuals they do not have a perfect harmonic behaviour but we can see a trend, it is a symbol of a positive autocorrelation
tslm_gdp<-function(country){
  gdp.ts <- ts(country$gdp)
  fitts<- tslm(gdp.ts~trend)
  print(summary(fitts))
  print(dwtest(fitts))
  ts.plot(country$gdp)
  abline(fitts,col=3)
  resfitts<- residuals(fitts)
  plot(resfitts,xlab="Time", ylab="residuals")
  Acf(resfitts)
  AIC(fitts)
}
#transform quantitative variables in log scale
logscale<-function(country){
  country[country==0]=1
  cols <- names(country)
  cols<-cols[-1]#remove Year
  country[cols] <- log(country[cols])
  return(country)
}
#perform a selection of the features based on the vif
lm_vif<-function(country){
  m1 <- lm(gdp~.-Year, data=country)
  vif_values <- vif(m1)
  #create horizontal bar chart to display each VIF value
  barplot(vif_values, main = "VIF Values", horiz = TRUE, col = "steelblue",las=1)
  abline(v = 5, lwd = 3, lty = 2)
  #keep only the variables with VIF<5
  country<-country[,c("Year","gdp",names(vif_values[vif_values<5]))]
  m1 <- lm(gdp~.-Year, data=country)
  m2 <- step(m1, direction="both",trace = 0)
  print(summary(m2))
  print(AIC(m2))
  print(dwtest(m2, alt="two.sided"))
  #we should achieve a better DW value than the one obtained with the model based only on trend
  ts.plot(country$gdp)
  lines(fitted(m2), col=2)
  #now we shouldn't see a trend on the residuals
  checkresiduals(m2)
  return(country)
}
#Auto Arima model
get_arima<-function(country){
  auto.a<- auto.arima(country$gdp)
  plot(country$gdp)
  fit<- fitted(auto.a)
  lines(fit, col=2)
  print(autoplot(forecast(auto.a)))
  checkresiduals(auto.a) #if residuals are normally distributed OK
  print(summary(auto.a))
}
#Auto Arima with external regressor
get_arimax<-function(country){
  columns = c("feature","AIC")
  df_arimax <- data.frame(matrix(nrow = 0, ncol = length(columns)))
  colnames(df_arimax) = columns
  x<-colnames(country)[-c(1,2)]
  for (i in x){
    y=country[,names(country)==i]
    armax<- auto.arima(country$gdp, xreg=y)
    plot(country$gdp)
    lines(fitted(armax), col=2)
    checkresiduals(armax)
    df_arimax[nrow(df_arimax) + 1,1] = i
    df_arimax[nrow(df_arimax),2] = round(AIC(armax), digits = 2)
  }
  return(df_arimax)
}
```


```{r}
it<-agg_item("Italy")
fr<-agg_item("France")
us<-agg_item("United States")
cn<-agg_item("China")
br<-agg_item("Brazil")
id<-agg_item("India")
comment(it) <-"Italy"
comment(fr) <-"France"
comment(us) <-"United States"
comment(cn) <-"China"
comment(br) <-"Brazil"
comment(id) <-"India"
```

```{r}
#divide each feature by population
bypop<-function(country){
  cols <- names(country)
  cols<-cols[-1]#remove Year
  cols<-cols[cols != "pop"] #remove pop from the names
  country[cols] <- country[cols]/country$pop #divide each feature by pop
  cols<-cols[cols != "Live"]
  cols<-cols[cols != "gdp"]
  country[cols] <- country[cols]*1000 #multiply each feature by 1000 to get kg for person
  country$pop<-country$pop/1000000 #get population in millions
  nums <- vapply(country, is.numeric, FUN.VALUE = logical(1))
  country[,nums] <- round(country[,nums], digits = 2) #keep only 2 digits
  return(country)
}
itpop<-bypop(it)
frpop<-bypop(fr)
uspop<-bypop(us)
cnpop<-bypop(cn)
idpop<-bypop(id)
brpop<-bypop(br)
```

```{r}
#since we are working with high value features, we could apply a log transformation
it_log<-logscale(it)
fr_log<-logscale(fr)
us_log<-logscale(us)
cn_log<-logscale(cn)
id_log<-logscale(id)
br_log<-logscale(br)
```


```{r}
dfc<-function(countries,countries_names,title,title2,title3){
  columns = c("Year","gdp","country") 
  df1 = data.frame(matrix(nrow = 0, ncol = length(columns))) 
  colnames(df1) = columns
  i=1
  for(x in countries){
    dd<-x[,c("Year","gdp")]
    dd$country<-countries_names[i]
    i=i+1
    df1<-rbind(df1,dd)
  }
  df2=data.frame(df1)
  df2$Year<-as.character(format(df1$Year,'%Y'))
  columns = c("Year",countries_names) 
  df3 = data.frame(matrix(nrow = 60, ncol = length(columns))) 
  colnames(df3) = columns
  i=1
  for(x in countries){
      df3$Year<-x[,"Year"]
      n=countries_names[i]
      i=i+1
      df3[,colnames(df3)==n]<-x[,"gdp"]
  }
  d=dim(df3)[2]
  df3 <- xts(df3[,2:d],df3$Year)
  list(df1 %>%
  mutate(class = fct_reorder(country, gdp, .fun='median')) %>%
  ggplot( aes(x=reorder(country, gdp), y=gdp, fill=country)) + 
    geom_boxplot() +
    xlab("Country") + ylab("Gdp")+ggtitle(title)+
    theme(legend.position="none"),
  df2 %>%
  mutate(class = fct_reorder(Year, gdp, .fun='median')) %>%
  ggplot( aes(x=reorder(Year, gdp), y=gdp, fill=Year)) + 
    geom_boxplot() +
    xlab("Year") + ylab("Gdp")+ggtitle(title2)+
    theme(legend.position="none")+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5,
                                                                    hjust=1)),
  ggplot(mapping = aes(x = Index, y = Value)) +
    geom_line(data = fortify(df3$Italy, melt = TRUE), aes(color = "Italy"),size=1.2) + 
    geom_line(data = fortify(df3$France, melt = TRUE), aes(color = "France"),size=1.2) + 
    geom_line(data = fortify(df3$`United States`, melt = TRUE), aes(color = "United States"),size=1.2) +
    geom_line(data = fortify(df3$China, melt = TRUE), aes(color = "China"),size=1.2) +
    geom_line(data = fortify(df3$Brazil, melt = TRUE), aes(color = "India"),size=1.2) +
    geom_line(data = fortify(df3$India, melt = TRUE), aes(color = "Brazil"),size=1.2) +
    xlab("Year") + ylab("GDP")+ggtitle(title3))
}

dfc(list(it,fr,us,cn,id,br),c("Italy","France","United States","China","India","Brazil"),'Median Total GPD by Country','Median Total GPD by Year',"Total GDP growth")

dfc(list(it_log,fr_log,us_log,cn_log,id_log,br_log),c("Italy","France","United States","China","India","Brazil"),'Median Total log(GPD) by Country','Median log(GPD) by Year',"Log(GDP) growth")

dfc(list(itpop,frpop,uspop,cnpop,idpop,brpop),c("Italy","France","United States","China","India","Brazil"),'Median GPD Per Capita by Country','Median GPD Per Capita by Year',"GDP Per Capita growth")
```


```{r}
#se passi in input 1 usa itpop,frpop, se passi 2 usa it_log
countries_boxplots<-function(countries,y){
  columns = c("Country","Item","Value") 
  df = data.frame(matrix(nrow = 0, ncol = length(columns))) 
  colnames(df) = columns
  for(con in countries){
    country<-agg_item(con)
    if(y==1){
      country<-bypop(country)
    }
    else if(y==2){
      country<-logscale(country)
    }
    cols=colnames(country)[-1]
    for(i in cols){
      a<-rep(con,60)
      b<-rep(i,60)
      c<-country[,colnames(country)==i]
      dd <- data.frame(Country=a,Item=b,Value=c)
      df<-rbind(df,dd)
    }
  }
  ggplot(df, aes(x=Item, y=Value, fill=Country)) + 
    geom_boxplot() +
    facet_wrap(~Item, scale="free")
}
countries_boxplots(c("Italy","France"),0)
countries_boxplots(c("Italy","France"),1)
countries_boxplots(c("Italy","France"),2)
countries_boxplots(c("Brazil","India","China"),1)
countries_boxplots(c("China","United States"),1)
```


```{r}
#per Francia mettere # nella funzione ggplots per other
#per Brasile mettere # nella funzione ggplots per ms
#per USA mettere # nella funzione ggplots per fibres
ggplots(itpop)
```


```{r}
corcountry(it)
```


```{r}
#check the data by histograms
check_hist<-function(country){
  par(mfrow=c(1,3))
  for(i in c(2:4)){
    hist(country[,i], col="orange", main=paste(colnames(country)[i]), xlab="")
    }
  par(mfrow=c(1,3))
  for(i in c(5:7)){
    hist(country[,i], col="orange", main=paste(colnames(country)[i]), xlab="")
    }
  par(mfrow=c(1,3))
  for(i in c(8:10)){
    hist(country[,i], col="orange", main=paste(colnames(country)[i]), xlab="")
    }
  par(mfrow=c(1,3))
  for(i in c(11:13)){
    hist(country[,i], col="orange", main=paste(colnames(country)[i]), xlab="")
  }
}
check_hist(it_log)
check_hist(itpop)
```



```{r}
tslm_gdp(it)
tslm_gdp(it_log)
tslm(itpop)
```

```{r}
it_restricted<-lm_vif(it)
it_pop_restricted<-lm_vif(itpop)
it_log_restricted<-lm_vif(it_log)
```


```{r}
#ARIMA
#test to see if the time series is stationary for the gdp
#We reject the null hypothesis of stationary if the p-value is smaller than 0.05.
#(the p-value is always >0.05 for all the countries, the series are not stationary)
adf.test(it_restricted$gdp)
adf.test(it_log_restricted$gdp)
#check if the time series has white noise
#check how long is the tail, how many lags it takes for the bars to get below the line of the white noise
#other check for seasonality, the ACF plot usually reveals definitive repeated spikes at the multiples of the seasonal window.
tsdisplay(it_restricted$gdp)
tsdisplay(it_log_restricted$gdp)
```

```{r}
get_arima(it_restricted)
get_arima(it_log_restricted)
#arima with lowest AIC is the best
```

```{r}
armax_aics<-get_arimax(it_restricted)
armax_aics
armax_aics[armax_aics$AIC==min(armax_aics$AIC),]$feature
```

```{r}
armax_aics_log<-get_arimax(it_log_restricted)
armax_aics_log
armax_aics_log[armax_aics_log$AIC==min(armax_aics_log$AIC),]$feature
```

```{r}
#Plots the scatter plot in preparation to GAM
plotcrops<-function(country){
  xs<-colnames(country)[-c(1,2)]
  y<-country$gdp
  columns = c("Item","GDP","Value") 
  df = data.frame(matrix(nrow = 0, ncol = length(columns))) 
  colnames(df) = columns
  for(x in xs){
    dd<-data.frame(Item=x,GDP=y,Value=country[,colnames(country)==x])
    df<-rbind(df,dd)
    }
  xyplot(GDP ~ Value | Item, data=df,pch=1,col=2)
}
plotcrops(it_restricted)
plotcrops(it_log_restricted)
```





```{r}
farm.corr %>%
  select(farming$Year, farming$Value, farming$Previous_value, farming$Increase, farming$GDP, farming$Previous_GDP, farming$Increase_GDP, farming$Pop, farming$Previous_Pop, farming$Increase_Pop, farming$Agg, farming$AverageTemperature)
farm.corr <- farming
#names(farm.corr)[names(farm.corr) == "long_column_name"] <- "short_name"
cor <- cor(farm.corr[4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18])
corrplot(cor, type = 'upper', tl.cex = 0.5)
```
