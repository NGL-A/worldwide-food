---
title: "Progetto food-gdp"
author: "Myself"
date: "19/11/2022"
output: html_document
---
Study the data of the country
Correlation matrix to see correlation among predictors
Use tslm as baseline, check dw
Use linear model to get VIF and extract a subset of features
Use Arima
Use Arimax looking for the feature that gets the lowest AIC

ACf has significant correlation -> trend
F -> significance of the model, if>4 good

```{r}
library(readxl)
library(lmtest) 
library(forecast)
library(DIMORA)
library(fastDummies)
library(dplyr)
library("xts")
library(ggplot2)
library(corrplot)
library(car)
library(forcats)
library(tseries)
farming <- read.csv(file = './farming.csv')
```


```{r}
#return year-gdp for a specific country
country_gdp <- function(country_name){
  country_subset = farming[farming$Area==country_name,]
  Year = c(min(country_subset$Year):max(country_subset$Year))
  gdp = c()
  for (y in Year){
    gdp = append(gdp,country_subset[country_subset$Year==y,]$GDP[1])
  }
  return(data.frame(Year,gdp))
}
#return year-pop for a specific country
country_pop <- function(country_name){
  country_subset = farming[farming$Area==country_name,]
  Year = c(min(country_subset$Year):max(country_subset$Year))
  pop = c()
  for (y in Year){
    pop = append(pop,country_subset[country_subset$Year==y,]$Pop[1])
  }
  return(data.frame(Year,pop))
}
#return item dataframe for a specific country
country_item <- function(country_name,crop){
  country_subset = farming[(farming$Area==country_name)&(farming$Item==crop),]
  return(data.frame(country_subset$Year,country_subset$Value))
}
#return subset for a country
country_crops <- function(country_name){
  return(farming[farming$Area==country_name,])
}
#return change subset for a specific country and a specific item if given
country_item_increase <- function(country_name,crop=""){
  if (crop==""){
    country_subset = farming[farming$Area==country_name,]
  }
  else{
    country_subset = farming[(farming$Area==country_name)&(farming$Item==crop),]
  }
  years = c(min(country_subset$Year):max(country_subset$Year))
  change = c()
  for (y in years){
    change = append(change,mean(country_subset[country_subset$Year==y,]$Increase))
  }
  return(data.frame(years,change))
}
#return dataframe of the country with aggregate value by year and type,gpd,pop
agg_item<-function(country){
  subfarming <- farming[farming$Area==country,]
  subfarming<-aggregate(Value ~ Year+type, data=subfarming, FUN=sum)
  subfarming <- dummy_cols(subfarming)
  crops_types <-subfarming$type[!duplicated(subfarming$type)]
  names(subfarming)<-c("Year","type","Value",crops_types)
  for (i in crops_types){
    subfarming[subfarming[names(subfarming)==i]==1,i] = subfarming[subfarming[names(subfarming)==i]==1,"Value"]
  }
  df <- data.frame(c(min(subfarming$Year):max(subfarming$Year)))
  names(df)<-"Year"
  for (i in crops_types){
    df2=(subfarming[subfarming[names(subfarming)==i]!=0,c("Year",i)])
    df<-merge(df,df2,by="Year",all.x = TRUE)
    }
  df[is.na(df)] <- 0
  df=merge.data.frame(df,country_gdp(country),by="Year")
  df=merge.data.frame(df,country_pop(country),by="Year")
  colnames(df)[colnames(df) == 'fruit_vegetables'] <- 'fr_veg'
  colnames(df)[colnames(df) == 'mushrooms'] <- 'ms'
  df$Year<-as.Date(as.character(df$Year),format="%Y")
  return(df)
}
#Plot the correlation matrix for the dataset of the country given
corcountry <- function(country_subset){
  cor=cor(country_subset[,-1])
  corrplot(cor,is.corr = TRUE,type="upper",title=comment(country_subset),mar=c(0,0,1,0))
  corrplot(cor,is.corr = TRUE,type="upper",title=comment(country_subset),method = 'number',number.cex = 0.75,mar=c(0,0,1,0))
}
#Plot 3 ggplots for coltivations,gdp and population for the country given
ggplots<-function(country_subset){
  d=dim(country_subset)[2]
  df <- xts(country_subset[,2:d],country_subset$Year)
  list(ggplot(mapping = aes(x = Index, y = Value)) +
    geom_line(data = fortify(df$cereals, melt = TRUE), aes(color = "cereals"),size=1.2) + 
    geom_line(data = fortify(df$fibres, melt = TRUE), aes(color = "fibres"),size=1.2) + 
    #geom_line(data = fortify(df$fr_veg, melt = TRUE), aes(color = "fr_veg"),size=1.2) +
    geom_line(data = fortify(df$herbs, melt = TRUE), aes(color = "herbs"),size=1.2) +
    geom_line(data = fortify(df$legumes, melt = TRUE), aes(color = "legumes"),size=1.2) +
    #geom_line(data = fortify(df$Live, melt = TRUE), aes(color = "Live"),size=1.2) +
    geom_line(data = fortify(df$ms, melt = TRUE), aes(color = "ms"),size=1.2) +
    geom_line(data = fortify(df$nuts, melt = TRUE), aes(color = "nuts"),size=1.2) +
    geom_line(data = fortify(df$oils, melt = TRUE), aes(color = "oils"),size=1.2) +
    geom_line(data = fortify(df$other, melt = TRUE), aes(color = "other"),size=1.2) +
    geom_line(data = fortify(df$tubers, melt = TRUE), aes(color = "tubers"),size=1.2) +
    xlab("Year") + ylab("Tons")+ggtitle('Production growth'),
  ggplot(mapping = aes(x = Index, y = Value)) +
    geom_line(data = fortify(df$gdp, melt = TRUE), aes(color = "GDP"),size=1.2) + 
    xlab("Year") + ylab("Gdp")+ggtitle('GDP growth'),
  ggplot(mapping = aes(x = Index, y = Value)) +
    geom_line(data = fortify(df$pop, melt = TRUE), aes(color = "Population"),size=1.2) + 
    xlab("Year") + ylab("Population")+ggtitle('Population growth'))
}
#Time Series linear model for gdp
#If the R squared is very high but the value of DWTest is near 0 that means there is a positive autocorrelation among the residuals at lag 1
#If checking the plot of the residuals they do not have a perfect harmonic behaviour but we can see a trend, it is a symbol of a positive autocorrelation
tslm_gdp<-function(country){
  gdp.ts <- ts(country$gdp)
  fitts<- tslm(gdp.ts~trend)
  print(summary(fitts))
  print(dwtest(fitts))
  ts.plot(country$gdp)
  abline(fitts,col=3)
  resfitts<- residuals(fitts)
  plot(resfitts,xlab="Time", ylab="residuals")
  Acf(resfitts)
  AIC(fitts)
}
#transform quantitative variables in log scale
logscale<-function(country){
  country[country==0]=1
  cols <- names(country)
  cols<-cols[-1]#remove Year
  country[cols] <- log(country[cols])
  return(country)
}
#perform a selection of the features based on the vif
lm_vif<-function(country){
  m1 <- lm(gdp~.-Year, data=country)
  vif_values <- vif(m1)
  #create horizontal bar chart to display each VIF value
  barplot(vif_values, main = "VIF Values", horiz = TRUE, col = "steelblue",las=1)
  abline(v = 5, lwd = 3, lty = 2)
  #keep only the variables with VIF<5
  country<-country[,c("Year","gdp",names(vif_values[vif_values<5]))]
  m1 <- lm(gdp~.-Year, data=country)
  m2 <- step(m1, direction="both",trace = 0)
  print(summary(m2))
  print(AIC(m2))
  print(dwtest(m2, alt="two.sided"))
  #we should achieve a better DW value than the one obtained with the model based only on trend
  ts.plot(country$gdp)
  lines(fitted(m2), col=2)
  #now we shouldn't see a trend on the residuals
  checkresiduals(m2)
  return(country)
}
#Auto Arima model
get_arima<-function(country){
  auto.a<- auto.arima(country$gdp)
  print(autoplot(forecast(auto.a)))
  checkresiduals(auto.a) #if residuals are normally distributed OK
  print(AIC(auto.a))
}
#Auto Arima with external regressor
get_arimax<-function(country){
  columns = c("feature","AIC")
  df_arimax <- data.frame(matrix(nrow = 0, ncol = length(columns)))
  colnames(df_arimax) = columns
  x<-colnames(country)[-c(1,2)]
  for (i in x){
    y=country[,names(country)==i]
    armax<- auto.arima(country$gdp, xreg=y)
    checkresiduals(armax)
    plot(country$gdp)
    lines(fitted(armax), col=2)
    df_arimax[nrow(df_arimax) + 1,1] = i
    df_arimax[nrow(df_arimax),2] = round(AIC(armax), digits = 2)
  }
  return(df_arimax)
}
```


```{r}
it<-agg_item("Italy")
fr<-agg_item("France")
us<-agg_item("United States")
cn<-agg_item("China")
br<-agg_item("Brazil")
id<-agg_item("India")
comment(it) <-"Italy"
comment(fr) <-"France"
comment(us) <-"United States"
comment(cn) <-"China"
comment(br) <-"Brazil"
comment(id) <-"India"
```


```{r}
columns = c("Year","gdp","country") 
df = data.frame(matrix(nrow = 0, ncol = length(columns))) 
colnames(df) = columns
dd<-it[,c("Year","gdp")]
dd$country<-"Italy"
df<-rbind(df,dd)
dd<-fr[,c("Year","gdp")]
dd$country<-"France"
df<-rbind(df,dd)
dd<-us[,c("Year","gdp")]
dd$country<-"United States"
df<-rbind(df,dd)
dd<-cn[,c("Year","gdp")]
dd$country<-"China"
df<-rbind(df,dd)
dd<-id[,c("Year","gdp")]
dd$country<-"India"
df<-rbind(df,dd)
dd<-br[,c("Year","gdp")]
dd$country<-"Brazil"
df<-rbind(df,dd)
df %>%
  mutate(class = fct_reorder(country, gdp, .fun='median')) %>%
  ggplot( aes(x=reorder(country, gdp), y=gdp, fill=country)) + 
    geom_boxplot() +
    xlab("Country") + ylab("Gdp")+ggtitle('Median GPD by Country')+
    theme(legend.position="none")
df$Year<-as.character(format(df$Year,'%Y'))
df %>%
  mutate(class = fct_reorder(Year, gdp, .fun='median')) %>%
  ggplot( aes(x=reorder(Year, gdp), y=gdp, fill=Year)) + 
    geom_boxplot() +
    xlab("Year") + ylab("Gdp")+ggtitle('Median GPD by Year')+
    theme(legend.position="none")+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Google "when did the transfer of industries to china started", it explains the outliers for china and india are not really outliers
columns = c("Year","Italy","France","United States","China","Brazil","India") 
df = data.frame(matrix(nrow = 60, ncol = length(columns))) 
colnames(df) = columns
df$Year<-it$Year
df$Italy<-it$gdp
df$France<-fr$gdp
df$`United States` <-us$gdp
df$China<-cn$gdp
df$Brazil<-br$gdp
df$India<-id$gdp
d=dim(df)[2]
df <- xts(df[,2:d],df$Year)
ggplot(mapping = aes(x = Index, y = Value)) +
    geom_line(data = fortify(df$Italy, melt = TRUE), aes(color = "Italy"),size=1.2) + 
    geom_line(data = fortify(df$France, melt = TRUE), aes(color = "France"),size=1.2) + 
    geom_line(data = fortify(df$`United States`, melt = TRUE), aes(color = "United States"),size=1.2) +
    geom_line(data = fortify(df$China, melt = TRUE), aes(color = "China"),size=1.2) +
    geom_line(data = fortify(df$Brazil, melt = TRUE), aes(color = "Brazil"),size=1.2) +
    geom_line(data = fortify(df$India, melt = TRUE), aes(color = "India"),size=1.2) +
    xlab("Year") + ylab("GDP")+ggtitle('GDP growth')
```

```{r}
countries_boxplots<-function(countries){
  columns = c("Country","Item","Value") 
  df = data.frame(matrix(nrow = 0, ncol = length(columns))) 
  colnames(df) = columns
  for(con in countries){
    country<-agg_item(con)
    cols=colnames(country)[-1]
    for(i in cols){
      a<-rep(con,60)
      b<-rep(i,60)
      c<-country[,colnames(country)==i]
      dd <- data.frame(Country=a,Item=b,Value=c)
      df<-rbind(df,dd)
    }
  }
  ggplot(df, aes(x=Item, y=Value, fill=Country)) + 
    geom_boxplot() +
    facet_wrap(~Item, scale="free")
}
countries_boxplots(c("Italy","France"))
countries_boxplots(c("Brazil","India","China"))
countries_boxplots(c("China","United States"))
```


```{r}
#per Francia mettere # nella funzione ggplots per other
#per Brasile mettere # nella funzione ggplots per ms
#per USA mettere # nella funzione ggplots per fibres
ggplots(it)
```


```{r}
corcountry(it)
```


```{r}
#check the data by histograms
summary(it$gdp)
par(mfrow=c(1,3))
for(i in c(2:4)){
  hist(it[,i], col="orange", main=paste(colnames(it)[i]), xlab="")
}
par(mfrow=c(1,3))
for(i in c(5:7)){
  hist(it[,i], col="orange", main=paste(colnames(it)[i]), xlab="")
}
par(mfrow=c(1,3))
for(i in c(8:10)){
  hist(it[,i], col="orange", main=paste(colnames(it)[i]), xlab="")
}
par(mfrow=c(1,3))
for(i in c(11:13)){
  hist(it[,i], col="orange", main=paste(colnames(it)[i]), xlab="")
}
#since we are working with high value features, we apply a log transformation
it_log<-logscale(it)

par(mfrow=c(1,3))
for(i in c(2:4)){
  hist(it_log[,i], col="orange", main=paste(colnames(it)[i]), xlab="")
}
par(mfrow=c(1,3))
for(i in c(5:7)){
  hist(it_log[,i], col="orange", main=paste(colnames(it)[i]), xlab="")
}
par(mfrow=c(1,3))
for(i in c(8:10)){
  hist(it_log[,i], col="orange", main=paste(colnames(it)[i]), xlab="")
}
par(mfrow=c(1,3))
for(i in c(11:13)){
  hist(it_log[,i], col="orange", main=paste(colnames(it)[i]), xlab="")
}
```

```{r}
tslm_gdp(it)
tslm_gdp(it_log)
```

```{r}
it_restricted<-lm_vif(it)
it_log_restricted<-lm_vif(it_log)
```

```{r}
#ARIMA
#test to see if the time series is stationary for the gdp
#We reject the null hypothesis of stationary if the p-value is smaller than 0.05.
#(the p-value is always >0.05 for all the countries, the series are not stationary)
adf.test(it_restricted$gdp)
adf.test(it_log_restricted$gdp)
#check if the time series has white noise
#check how long is the tail, how many lags it takes for the bars to get below the line of the white noise
#other check for seasonality, the ACF plot usually reveals definitive repeated spikes at the multiples of the seasonal window.
tsdisplay(it_restricted$gdp)
tsdisplay(it_log_restricted$gdp)
```

```{r}
get_arima(it_restricted)
get_arima(it_log_restricted)
#arima with lowest AIC is the best
```

```{r}
armax_aics<-get_arimax(it_restricted)
armax_aics_log<-get_arimax(it_log_restricted)
armax_aics
armax_aics[armax_aics$AIC==min(armax_aics$AIC),]$feature
armax_aics_log
armax_aics_log[armax_aics_log$AIC==min(armax_aics_log$AIC),]$feature
```






















```{r}
###a better plot of the yearly time series
plot(it$gdp, type= "b",xlab="Year", ylab="Annual Gdp",  pch=16, lty=3, xaxt="n", cex=0.6)
axis(1, at=c(1,15,30,45,60), labels=it$Year[c(1,15,30,45,60)])

bm_gdp<-BM(it$gdp,display = T)
summary(bm_gdp)
pred_bm<- predict(bm_gdp, newx=c(1:50))#cumulative
pred.inst<- make.instantaneous(pred_bm)#instantaneous

###we estimate the model with 50% of the data
bm_gdp50<-BM(it$gdp[0:(dim(it)[1]/2)],display = T)
summary(bm_gdp50)
pred_bm50<- predict(bm_gdp50, newx=c(1:50))
pred.inst50<- make.instantaneous(pred_bm50)

###we estimate the model with 25% of the data
bm_gdp75<-BM(it$gdp[0:(dim(it)[1]/4)],display = T)
summary(bm_gdp75)
pred_bm75<- predict(bm_gdp75, newx=c(1:50))
pred.inst75<- make.instantaneous(pred_bm75)

###plot of fitted model 
plot(it$gdp, type= "b",xlab="Year", ylab="Annual Gdp",  pch=16, lty=3, xaxt="n", cex=0.6)
axis(1, at=c(1,15,30,45,60), labels=it$Year[c(1,15,30,45,60)])
lines(pred.inst75, lwd=2, col=2)
lines(pred.inst50, lwd=2, col=3)
lines(pred.inst, lwd=2, col=4)

###Comparison between models (cumulative)
plot(cumsum(it$gdp), type= "b",xlab="Year", ylab="Annual Gdp",  pch=16, lty=3, xaxt="n", cex=0.6)
axis(1, at=c(1,15,30,45,60), labels=it$Year[c(1,15,30,45,60)])
lines(pred_bm75, lwd=2, col=2)
lines(pred_bm50, lwd=2, col=3)
lines(pred_bm, lwd=2, col=4)
```







SE SI VUOLE UTILIZZARE GBM E GLI SHOCK BISOGNA USARE I BASS MODEL SUL DATASET SENZA LOGARITMI
```{r}
#GBM with 1 rectangular shock
GBMr1<- GBM(it$gdp,shock = "rett",nshock = 1,prelimestimates = c(bm_gdp$Estimate$Estimate[1], bm_gdp$Estimate$Estimate[2], bm_gdp$Estimate$Estimate[3], 40,50,-0.5))
summary(GBMr1)
```

```{r}
GBMe1<- GBM(it$gdp,shock = "exp",nshock = 1,prelimestimates = c(bm_gdp$Estimate$Estimate[1], bm_gdp$Estimate$Estimate[2], bm_gdp$Estimate$Estimate[3], 35,-0.1,0.1))
summary(GBMe1)
pred_GBMe1<- predict(GBMe1, newx=c(1:60))
pred_GBMe1.inst<- make.instantaneous(pred_GBMe1)
plot(it$gdp, type= "b",xlab="Year", ylab="GDP",  pch=16, lty=3, cex=0.6, xlim=c(1,60))
lines(pred_GBMe1.inst, lwd=2, col=2)
```

```{r}
GGM_gdp<- GGM(it$gdp, prelimestimates=c(bm_gdp$Estimate$Estimate[1], 0.001, 0.01, bm_gdp$Estimate$Estimate[2], bm_gdp$Estimate$Estimate[3]))
summary(GGM_gdp)
pred_GGM<- predict(GGM_gdp, newx=c(1:60))
pred_GGM.inst<- make.instantaneous(pred_GGM)
plot(it$gdp, type= "b",xlab="Year", ylab="GDP",  pch=16, lty=3, cex=0.6, xlim=c(1,60))
lines(pred_GGM.inst, lwd=2, col=2)
lines(predbm_inst, lwd=2, col=3)
Acf(residuals(GGM_gdp))
```

```{r}
ucrcdNR<-UCRCD(it$gdp,it$cereals)
summary(ucrcdNR)
```





```{r}
farm.corr %>%
  select(farming$Year, farming$Value, farming$Previous_value, farming$Increase, farming$GDP, farming$Previous_GDP, farming$Increase_GDP, farming$Pop, farming$Previous_Pop, farming$Increase_Pop, farming$Agg, farming$AverageTemperature)
farm.corr <- farming
#names(farm.corr)[names(farm.corr) == "long_column_name"] <- "short_name"
cor <- cor(farm.corr[4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18])
corrplot(cor, type = 'upper', tl.cex = 0.5)
```
